name: Benchmarks

on: push

jobs:
  Check_Pyccel_Version:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Benchmark of pyccel')
    outputs:
      new_version: ${{ steps.check_version.outputs.new_version }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install pyccel
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          python -m pip install pyccel
      - name: Check Version
        id: check_version
        run: |
          new_version=$(python -c "from pyccel import __version__; print(__version__)")
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT

  Benchmark_main:
    if: contains(github.event.head_commit.message, 'Benchmark of pyccel')
    uses:
      ./.github/workflows/bench_run.yml
    with:
      python_version: "3.10"
      full_key: "devel_performance_310"
      key: "devel_performance_310"
      pyccel_version: "$(date)"
      branch_name: "Devel branch"

  BuildReadme:
    runs-on: ubuntu-latest
    if: ${{ always() && contains(github.event.head_commit.message, 'Benchmark of pyccel')}}
    needs: [ Check_Pyccel_Version, Benchmark_main]

    steps:
      - uses: actions/checkout@v3
      - name: Write README
        uses: ./.github/actions/create_readme
        with:
          version: "${{ needs.Check_Pyccel_Version.outputs.new_version }}"
      - name: Add & Commit
        uses: EndBug/add-and-commit@v9
        with:
          message: 'Update README and version'
          add: "['README.md']"
          default_author: github_actions
          pull: '--rebase --autostash'
